Go 101
Principles, features, pros and cons
16:00 16 Jan 2016

Dusan Lilic
Software Engineer @ TruckTrack
kortemy@gmail.com
@kortemy_

* Introduction

* Introduction
- What is the deal with Go?
- Why is it so popular?
- Why are people criticizing it?
.image intro.jpg 500 _

* History
- Initial release in 2009
- Developed at Google
- Creted by Rob Pike, Ken Thompson and Robert Griesemer
.image history.png _ 900

* Goals and philosophy

* Core concepts
- Strongly typed, statically compiled
- Not backed by a VM
- Native compilation on all (seriously) platforms
- Designed for concurrency
- No dominant paradigm
- Both object-oriented and functional
- Neither object-oriented nor functional
.image concepts.jpg 500 _

* Simplicity
- Slim and simplified language specification
- Very easy to get into, both junior and senior friendly
- Stripped down of some common language features
.image simplicity.png 800 _

* Focused on development productivity
- Familiar C-like syntax
- Blazingly fast compile times
- Garbage collector
- Some dynamic typing features
- Very rich standard library
- Excellent go tool
.image productivity.png 250 _

* Tooling
- Excellent go tool
- go get will fetch you dependencies
- go fmt will format your code
- go doc will print you documentation
- go lint and go vet will analyze your code quality
- Many more community provided tools
.image tools.jpg 250 _

* Prominent language features

* Familiar syntax
.play complex.go

* Functional Go
- Support for functional programming
- Functions are first class citizens
- Can be assigned to variables, passed as argument
.code functions.go /^func g/,/^}/
.play functions.go /^func main/,/^}/

* Object Oriented Go
- Struct is object-like data structure
- Can have functions attached to it as methods
.code structs1.go /START OMIT/,/END OMIT/
.play structs1.go /^func main/,/^}/

* Object Oriented Go
- Prefers composition over inheritance
.code structs2.go /START OMIT/,/END OMIT/
.play structs2.go /^func main/,/^}/

* Interfaces
- No generics, interfaces instead
- A type which is basically a collection of functions
.code interfaces1.go /START1 OMIT/,/END1 OMIT/
.play interfaces1.go /^func main/,/^}/

* Interfaces
- Types implement an interface implicitly
- If a type has all the methods interface requires - it implements that interface
.code interfaces1.go /START2 OMIT/,/END2 OMIT/

* Pointers
- Go has pointers, but no pointer arithmetics
- A way to know if we are dealing with values or references
- Pointer is a type, denoted with *
- Type *T is a pointer to T value
  var a Person // a is a Person
  var b *Person // b is a pointer to a Person
- Operator & gets a pointer from a value
  b := &a
- Operator * gets a value from a pointer
  c := *b

* Pointers
.play pointers1.go

* Multiple return values
- Every function can return 0, 1, 2, 3... n values
- Commonly used for errors
- You can omit unwanted returned values
.code multi.go /^func someFunction/,/^}/
.play multi.go /^func main/,/^}/

* Err...Error handling
- Errors instead of exceptions
- Because errors are common, expected and not exceptions
- error is a type
.code errors.go /^func someFunction/,/^}/
.play errors.go /^func main/,/^}/
- panic() and recover() if you really like exceptions

* Goroutines
- Provides asynchronous execution
- Kinda like threads, but super lightweight
.code goroutines.go /^func say/,/^}/
.play goroutines.go /^func main/,/^}/

* Channels
- Pipe system used as for communication between concurrent goroutines
- Send values to channel in one goroutine, receive it in another goroutine
- Channels can be buffered
- Sending and receiving on a full channel is a blocking call
- You can send another channel through a channel
.play channels.go /^func main/,/^}/

* What's it good for and common criticism

* Who uses Go?
- Huge adoption by leading IT companies
- Very popular among startups
.image companies.jpg

* Common criticism
- Type system and no generics
- Error handling and no exceptions
- Lack of syntaxic sugar
- Bad dependency management
- Young and weak ecosystem
.image criticism.jpg 400 _

* Where it excels
- It is a general purpose language, good fit for anything
- Tooling and cli applications
- Microservices, or at least miniservices
- Rapid prototyping
- Applications with intense networking, filesystem operations
- Great for building databases
.image yes.jpg 300 _

* Where it falls short?
- No where in particular
- But that doesn't mean Go is the best choice for every job
- Huge monolithic applications
- Where tight memory management is essential
- Dynamic environments
.image no.jpg 300 _

* Future of Go
- Very short release cycles
- 1.6 to be released soon

Community

- Gopher Gala
.image community.jpg 400 _

* Conclusion
- There are only two kinds of languages: the ones people complain about and the ones nobody uses.  - Bjarne Stroustrup
- No language is an universal solution to all problems
- Go isn't perfect, but it's refreshing
- Very comfortable and easy to use

Have fun using Go!
