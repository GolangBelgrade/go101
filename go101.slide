Go 101
Principles, features, pros and cons
16:00 16 Jan 2016

Dusan Lilic
Software Engineer @ TruckTrack
kortemy@gmail.com
@kortemy_

* Introduction

* Introduction
- What is the deal with Go?
- Why is it so popular?
- Why are people criticizing it?
.image intro.jpg 500 _

* History
- Initial release in 2009
- Developed at Google
- Creted by Rob Pike, Ken Thompson and Robert Griesemer
.image history.png _ 900

* Goals and philosophy

* Core concepts
- Strongly typed, statically compiled
- Not backed by a VM
- Native compilation on all (seriously) platforms
- Designed for concurrency
- No dominant paradigm
- Both object-oriented and functional
- Neither object-oriented nor functional
.image concepts.jpg 500 _

* Simplicity
- Slim language specification
- Around 60 pages only!
- Very easy to get into, both junior and senior friendly
- Stripped down of some common language features
.image simplicity.png 800 _

* Focused on development productivity
- Familiar C-like syntax
- Blazingly fast compile times
- Garbage collector
- Type inference (like in dynamic languages)
- Very rich standard library
- Excellent go tool

* Standard library
- Web framework
- Testing framework
- HTML templating
- Common database interface with built-in SQL driver
- Encoders and decoders
- Crypto algorithms

* Tooling
- Excellent go tool
- go get
- go fmt
- go doc
- go lint and go vet
- Many more community provided tools

* Syntax and features

* Hello, Belgrade!
.play hello.go

* Hello, Belgrade!
.play complex.go

* Type inference
- No need to explicitly declare variable type by using := operator
- Dynamic typing in a static language

For example:

  var number int = 0
is the equivalent to

  number := 0
Like that

  var name string = "Pera"

is the equivalent to

  name := "Pera"

* Type inference
- Works for all types

  var city City = &City{"Belgrade"}

is the equivalent to

  city := &City{"Belgrade"}

- Very useful when assigning from multiple-return functions
  result, err := someFunctionWhitchReturnsTwoThings()

- var for globals
- := for locally scoped variables

* Slices
- Slices are a major data type in Go
- Like arrays, but not limited by the number of elements
- Only defined by the type they contain
.play slices1.go /^func main/,/^}/

* Slices
- Built-in functions for manipulating slices
- len(), append(), copy() and cap()
.play slices2.go /^func main/,/^}/

* Maps
- Similar to slices, but indexed with other types besides integers
.play maps.go /^func main/,/^}/

* Functions
- Support for functional programming
- func is a type
- Can be assigned to variables, passed as argument
.code functions.go /^func g/,/^}/
.play functions.go /^func main/,/^}/

* Structs
- Object-like data structure
- A type which contains named fields
- Can have functions attached to it as methods
.code structs1.go /START OMIT/,/END OMIT/
.play structs1.go /^func main/,/^}/

* Structs
- No inheritance, only composition
.code structs2.go /START OMIT/,/END OMIT/
.play structs2.go /^func main/,/^}/

* Interfaces
- No generics, interfaces instead
- A type which is basically a collection of functions
.code interfaces1.go /START1 OMIT/,/END1 OMIT/
.play interfaces1.go /^func main/,/^}/

* Interfaces
- Types implement an interface implicitly
- If a type has all the methods interface requires - it implements that interface
.code interfaces1.go /START2 OMIT/,/END2 OMIT/

* Pointers
- Go has pointers, but no pointer arithmetics
- A way to know if we are dealing with values or references
- Pointer is a type, denoted with *
- Type *T is a pointer to T value
- Operator & gets a pointer from a value
- Operator * gets a value from a pointer

* Pointers
.play pointers1.go

* Pointers
.play pointers2.go

* Multiple return values
- Every function can return 0, 1, 2, 3... n values
- Commonly used for errors
- You can omit unwanted returned values
.code multi.go /^func someFunction/,/^}/
.play multi.go /^func main/,/^}/

* Err...Errors
- Errors instead of exceptions
- Because errors are common, expected and not exceptions
- error is a type
.code errors.go /^func someFunction/,/^}/
.play errors.go /^func main/,/^}/

* Panic and recover
- If you really, really like exceptions
.code panic.go /^func someFunction/,/^}/
.play panic.go /^func main/,/^}/

* Deferred statements
- Keyword defer
- Executes when current function returns
- Useful for various cleanup actions
.play defer.go /^func main/,/^}/

* Goroutines
- Keyword go
- Provides asynchronous execution
- Kinda like threads, but super lightweight
.code goroutines.go /^func say/,/^}/
.play goroutines.go /^func main/,/^}/

* Channels
- Pipe system used as for communication between concurrent goroutines
- Send values to channel in one goroutine, receive it in another goroutine
- Sending and receiving from a channel is a blocking call
- You can send another channel through a channel
.play channels.go /^func main/,/^}/

* Buffered channels
- Channels can act as message queues
- Sending and receiving will not block as long as the channel buffer is not full
.play bufferedchannels.go /^func main/,/^}/

* What's it good for and common criticism

* Who uses Go?
- Huge adoption by leading IT companies
- Very popular among startups
- Google, Basecamp, Docker, Dropbox, eBay, Facebook, Heroku, Medium, Netflix, SpaceX, SoundCloud, StackExchange, Tumblr, Twitch, Twitter, Uber

* Common criticism
- Type system and no generics
- Error handling and no exceptions
- Lack of syntaxic sugar
- Bad dependency management
- Young and weak ecosystem

* Where it excels
- It is a general purpose language, good fit for anything
- Tooling and cli applications
- Microservices
- Rapid prototyping
- Applications with intense networking
- Great for building databases

* Where it falls short?
- No where in particular
- But that doesn't mean Go is the best choice for every job
Go wouldn't be perfect for:

- Huge monolithic applications
- Where tight memory management is essential
- Dynamic environments

* Future of Go
- Very short release cycles

1.6 to be released soon

- Bringing Go to mobile platforms
- Additionally optimizing GC
- HTTP2 support
- Built in vendoring solution

Community

- Gopher Gala

* Conclusion
- There are only two kinds of languages: the ones people complain about and the ones nobody uses.  - Bjarne Stroustrup
- No language is an universal solution to all problems
- Go isn't perfect, but it's refreshing
- Very comfortable and easy to use

Have fun using Go!
